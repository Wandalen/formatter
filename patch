diff --git a/src/formatter.rs b/src/formatter.rs
index 7ea50ac..3a54c00 100644
--- a/src/formatter.rs
+++ b/src/formatter.rs
@@ -30,15 +30,42 @@ impl Emitter {
 #[derive(PartialEq, Eq, Clone, Copy, Debug)]
 #[non_exhaustive]
 pub(crate) enum Token {
+    /// `(`, `[`, `{`
     OpenDelimiter(Delimiter),
+    /// `)`, `]`, `}`
     CloseDelimiter(Delimiter),
+    /// `"hello"`
     String,
+    /// ` `
     Whitespace,
+    /// `\n`, `\r`
     Newline,
+    /// Unknown symbol
     Unknown,
+    // operators
+    /// `+`
+    Plus,
+    /// `-`
+    Minus,
+    /// `/`
+    Slash,
+    /// `*`
+    Star,
+
+    /// End of file.
     Eof,
 }
 
+impl Token {
+    /// Checks whether the token is an operator.
+    fn is_operator(&self) -> bool {
+        matches!(
+            self,
+            Token::Plus | Token::Minus | Token::Slash | Token::Star
+        )
+    }
+}
+
 impl Token {
     pub(crate) fn skip_whitespace(&self, kind: Option<Delimiter>) -> bool {
         match *self {
@@ -75,6 +102,7 @@ pub(crate) fn format(source: &str) -> String {
                     }
                 }
             }
+            _ if token.is_operator() && input.prev() != Token::Whitespace => emitter.whitespace(),
             _ => (),
         }
 
@@ -89,6 +117,7 @@ pub(crate) fn format(source: &str) -> String {
                 }
                 _ => {}
             },
+            _ if token.is_operator() && input.peek() != Token::Whitespace => emitter.whitespace(),
             _ => (),
         }
     }
diff --git a/src/formatter/input.rs b/src/formatter/input.rs
index 2977e7d..05c45e3 100644
--- a/src/formatter/input.rs
+++ b/src/formatter/input.rs
@@ -23,6 +23,10 @@ impl<'me> Input<'me> {
                 ')' => Token::CloseDelimiter(Delimiter::Paren),
                 ']' => Token::CloseDelimiter(Delimiter::Bracket),
                 '}' => Token::CloseDelimiter(Delimiter::Brace),
+                '+' => Token::Plus,
+                '-' => Token::Minus,
+                '/' => Token::Slash,
+                '*' => Token::Star,
                 '"' => {
                     scan_string(first_char, &mut cursor);
                     Token::String
@@ -154,9 +158,12 @@ mod tests {
     #[test]
     fn whitespace() {
         check("    ", expect!["Whitespace at (0, 4)"]);
-        check("\n  \n  \n", expect![[r#"
+        check(
+            "\n  \n  \n",
+            expect![[r#"
             Newline at (0, 1)
-            Whitespace at (1, 7)"#]]);
+            Whitespace at (1, 7)"#]],
+        );
     }
 
     #[test]
diff --git a/tests/assets/empty_function.glsl b/tests/assets/empty_function.glsl
index 819c34f..356de12 100644
--- a/tests/assets/empty_function.glsl
+++ b/tests/assets/empty_function.glsl
@@ -1,3 +1 @@
-float empty( in vec2 st ){
-
-}
+float empty() {}
diff --git a/tests/assets/empty_function.glsl.expected b/tests/assets/empty_function.glsl.expected
index eca5707..356de12 100644
--- a/tests/assets/empty_function.glsl.expected
+++ b/tests/assets/empty_function.glsl.expected
@@ -1,2 +1 @@
-float empty( in vec2 st ){
-}
+float empty() {}
diff --git a/tests/assets/xd.glsl b/tests/assets/xd.glsl
deleted file mode 100644
index 0526be9..0000000
--- a/tests/assets/xd.glsl
+++ /dev/null
@@ -1,18 +0,0 @@
-float noise (in vec2 st){
-    vec2 i = floor(st);
-    vec2 f = fract(st);
-
-    // Four corners in 2D of a tile
-    float a = random(i);
-    float b = random(i+vec2(1.0, 0.0));
-    float c = random(i + vec2(0.0, 1.0));
-    float d = random(i + vec2(1.0, 1.0));
-
-    vec2 u = f * f * (3.0 - 2.0 * f);
-
-    if(a>=b && c>d && e==f) g=h;
-
-    return mix(a,b, u.x) +
-            (c-a)*u.y*(1.0 - u.x)+
-            (d - b)*u.x * u.y;
-}
\ No newline at end of file
diff --git a/tests/assets/xd.glsl.expected b/tests/assets/xd.glsl.expected
deleted file mode 100644
index 282e3f8..0000000
--- a/tests/assets/xd.glsl.expected
+++ /dev/null
@@ -1,21 +0,0 @@
-float noise( in vec2 st )
-{
-  vec2 i = floor( st );
-  vec2 f = fract( st );
-
-  // Four corners in 2D of a tile
-  float a = random( i );
-  float b = random( i + vec2( 1.0, 0.0 ) );
-  float c = random( i + vec2( 0.0, 1.0 ) );
-  float d = random( i + vec2( 1.0, 1.0 ) );
-
-  vec2 u = f * f * ( 3.0 - 2.0 * f );
-
-  if( a>= b && c > d && e == f )
-  g = h;
-
-  return mix( a , b , u.x ) +
-  ( c - a ) * u.y * ( 1.0 - u.x ) +
-  ( d - b ) * u.y * u.x;
-}
-
