Ident ["fn"] at (0, 2)
Whitespace [" "] at (2, 3)
Ident ["main"] at (3, 7)
OpenDelimiter(Paren) ["("] at (7, 8)
CloseDelimiter(Paren) [")"] at (8, 9)
Whitespace [" "] at (9, 10)
OpenDelimiter(Brace) ["{"] at (10, 11)
Newline ["\n"] at (11, 12)
Whitespace ["    "] at (12, 16)
Comment ["// You can use escapes to write bytes by their hexadecimal values..."] at (16, 84)
Newline ["\n"] at (84, 85)
Whitespace ["    "] at (85, 89)
Ident ["let"] at (89, 92)
Whitespace [" "] at (92, 93)
Ident ["byte_escape"] at (93, 104)
Whitespace [" "] at (104, 105)
Eq ["="] at (105, 106)
Whitespace [" "] at (106, 107)
String ["\"I'm writing \\x52\\x75\\x73\\x74!\""] at (107, 138)
Unknown [";"] at (138, 139)
Newline ["\n"] at (139, 140)
Whitespace ["    "] at (140, 144)
Ident ["println"] at (144, 151)
Unknown ["!"] at (151, 152)
OpenDelimiter(Paren) ["("] at (152, 153)
String ["\"What are you doing\\x3F (\\\\x3F means ?) {}\""] at (153, 196)
Unknown [","] at (196, 197)
Whitespace [" "] at (197, 198)
Ident ["byte_escape"] at (198, 209)
CloseDelimiter(Paren) [")"] at (209, 210)
Unknown [";"] at (210, 211)
Newline ["\n\n"] at (211, 213)
Whitespace ["    "] at (213, 217)
Comment ["// ...or Unicode code points."] at (217, 246)
Newline ["\n"] at (246, 247)
Whitespace ["    "] at (247, 251)
Ident ["let"] at (251, 254)
Whitespace [" "] at (254, 255)
Ident ["unicode_codepoint"] at (255, 272)
Whitespace [" "] at (272, 273)
Eq ["="] at (273, 274)
Whitespace [" "] at (274, 275)
String ["\"\\u{211D}\""] at (275, 285)
Unknown [";"] at (285, 286)
Newline ["\n"] at (286, 287)
Whitespace ["    "] at (287, 291)
Ident ["let"] at (291, 294)
Whitespace [" "] at (294, 295)
Ident ["character_name"] at (295, 309)
Whitespace [" "] at (309, 310)
Eq ["="] at (310, 311)
Whitespace [" "] at (311, 312)
String ["\"\\\"DOUBLE-STRUCK CAPITAL R\\\"\""] at (312, 341)
Unknown [";"] at (341, 342)
Newline ["\n\n"] at (342, 344)
Whitespace ["    "] at (344, 348)
Ident ["println"] at (348, 355)
Unknown ["!"] at (355, 356)
OpenDelimiter(Paren) ["("] at (356, 357)
String ["\"Unicode character {} (U+211D) is called {}\""] at (357, 401)
Unknown [","] at (401, 402)
Newline ["\n"] at (402, 403)
Whitespace ["                "] at (403, 419)
Ident ["unicode_codepoint"] at (419, 436)
Unknown [","] at (436, 437)
Whitespace [" "] at (437, 438)
Ident ["character_name"] at (438, 452)
Whitespace [" "] at (452, 453)
CloseDelimiter(Paren) [")"] at (453, 454)
Unknown [";"] at (454, 455)
Newline ["\n\n\n"] at (455, 458)
Whitespace ["    "] at (458, 462)
Ident ["let"] at (462, 465)
Whitespace [" "] at (465, 466)
Ident ["long_string"] at (466, 477)
Whitespace [" "] at (477, 478)
Eq ["="] at (478, 479)
Whitespace [" "] at (479, 480)
String ["\"(String literals)\n                        [can span multiple lines]\n                        {The linebreak and indentation here}\n                        (can be escaped too)\""] at (480, 655)
Unknown [";"] at (655, 656)
Newline ["\n"] at (656, 657)
Whitespace ["    "] at (657, 661)
Ident ["println"] at (661, 668)
Unknown ["!"] at (668, 669)
OpenDelimiter(Paren) ["("] at (669, 670)
String ["\"{}\""] at (670, 674)
Unknown [","] at (674, 675)
Whitespace [" "] at (675, 676)
Ident ["long_string"] at (676, 687)
CloseDelimiter(Paren) [")"] at (687, 688)
Unknown [";"] at (688, 689)
Newline ["\n"] at (689, 690)
CloseDelimiter(Brace) ["}"] at (690, 691)
Newline ["\n"] at (691, 692)